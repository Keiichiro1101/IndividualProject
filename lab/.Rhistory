your_data <- rnorm(1000, mean = 50, sd = 10)
# UI
ui <- fluidPage(
titlePanel("Article Shares Histogram"),
sidebarLayout(
sidebarPanel(),
mainPanel(
plotOutput("histogram")
)
)
)
# Server
server <- function(input, output) {
output$histogram <- renderPlot({
# Create a histogram of the 'shares' column from your data
ggplot(your_data, aes(x = shares)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black") +
labs(x = "Shares", y = "Frequency") +
theme_minimal()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Generate a random data frame for testing
set.seed(123)
num_samples <- 1000
your_data <- data.frame(shares = rpois(num_samples, lambda = 1000))
# UI
ui <- fluidPage(
titlePanel("Article Shares Histogram"),
sidebarLayout(
sidebarPanel(),
mainPanel(
plotOutput("histogram")
)
)
)
# Server
server <- function(input, output) {
output$histogram <- renderPlot({
# Create a histogram of the 'shares' column from your data
ggplot(your_data, aes(x = shares)) +
geom_histogram(binwidth = 100, fill = "blue", color = "black") +
labs(x = "Shares", y = "Frequency") +
theme_minimal()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Generate a random data frame for testing
set.seed(123)
num_samples <- 1000
your_data <- data.frame(shares = rpois(num_samples, lambda = 1000))
# UI
ui <- fluidPage(
titlePanel("Article Shares Histogram"),
sidebarLayout(
sidebarPanel(
sliderInput("binwidth", "Bin Width:", min = 10, max = 200, value = 100)
),
mainPanel(
plotOutput("histogram")
)
)
)
# Server
server <- function(input, output) {
output$histogram <- renderPlot({
# Create a histogram of the 'shares' column from your data
gg <- ggplot(your_data, aes(x = shares)) +
geom_histogram(binwidth = input$binwidth, fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = "Shares", y = "Frequency") +
theme_minimal() +
ggtitle("Distribution of Article Shares") +
labs(subtitle = paste("Bin Width:", input$binwidth))
# Calculate and add mean and median annotations
mean_shares <- mean(your_data$shares)
median_shares <- median(your_data$shares)
gg <- gg +
geom_vline(xintercept = mean_shares, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_shares, y = 50, label = paste("Mean:", round(mean_shares, 2)), color = "red", size = 4) +
geom_vline(xintercept = median_shares, color = "blue", linetype = "dashed", size = 1) +
annotate("text", x = median_shares, y = 100, label = paste("Median:", round(median_shares, 2)), color = "blue", size = 4)
print(gg)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
library(tm)
library(RColorBrewer)  # For color palettes
# Sample text data
text <- c("Data", "Science", "Machine", "R", "Python", "Data", "Machine", "Learning", "R", "Statistics", "R", "Data","R", "Visualization", "Data")
# UI
ui <- fluidPage(
titlePanel("Word Cloud Generator"),
sidebarLayout(
sidebarPanel(
textAreaInput("textData", "Enter text data (comma-separated):", value = paste(text, collapse = ", "), rows = 5),
sliderInput("minFreq", "Minimum word frequency:", min = 1, max = 10, value = 1),
actionButton("runWordCloud", "Run Word Cloud")
),
mainPanel(
plotOutput("wordcloudPlot")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$runWordCloud, {
# Preprocess the text data
text_data <- unlist(strsplit(input$textData, ","))
text_data <- tolower(trimws(text_data))
corpus <- Corpus(VectorSource(text_data))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
freq_matrix <- as.matrix(dtm)
word_freqs <- colSums(freq_matrix)
# Filter words by minimum frequency
filtered_words <- names(word_freqs[word_freqs >= input$minFreq])
# Generate a random color palette
colors <- brewer.pal(length(filtered_words), "Set3")
# Create a word frequency data frame with random colors
word_freq_df <- data.frame(
word = filtered_words,
freq = word_freqs[filtered_words],
color = sample(colors, length(filtered_words), replace = TRUE)
)
# Generate the word cloud with colored words
wordcloud2(data = word_freq_df, color = "color")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
library(tm)
library(RColorBrewer)  # For color palettes
# Sample text data
text <- c("Data", "Science", "Machine", "R", "Python", "Data", "Machine", "Learning", "R", "Statistics", "R", "Data","R", "Visualization", "Data")
# UI
ui <- fluidPage(
titlePanel("Word Cloud Generator"),
sidebarLayout(
sidebarPanel(
textAreaInput("textData", "Enter text data (comma-separated):", value = paste(text, collapse = ", "), rows = 5),
sliderInput("minFreq", "Minimum word frequency:", min = 1, max = 10, value = 1),
actionButton("runWordCloud", "Run Word Cloud")
),
mainPanel(
plotOutput("wordcloudPlot")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$runWordCloud, {
# Preprocess the text data
text_data <- unlist(strsplit(input$textData, ","))
text_data <- tolower(trimws(text_data))
corpus <- Corpus(VectorSource(text_data))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
freq_matrix <- as.matrix(dtm)
word_freqs <- colSums(freq_matrix)
# Filter words by minimum frequency
filtered_words <- names(word_freqs[word_freqs >= input$minFreq])
# Generate a random color palette
colors <- brewer.pal(length(filtered_words), "Set3")
# Create a word frequency data frame with random colors
word_freq_df <- data.frame(
word = filtered_words,
freq = word_freqs[filtered_words],
color = sample(colors, length(filtered_words), replace = TRUE)
)
# Generate the word cloud with colored words
wordcloud2(data = word_freq_df, color = "color")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
library(tm)
library(RColorBrewer)  # For color palettes
# Sample text data
text <- c("Data", "Science", "Machine", "R", "Python", "Data", "Machine", "Learning", "R", "Statistics", "R", "Data","R", "Visualization", "Data")
# UI
ui <- fluidPage(
titlePanel("Word Cloud Generator"),
sidebarLayout(
sidebarPanel(
textAreaInput("textData", "Enter text data (comma-separated):", value = paste(text, collapse = ", "), rows = 5),
sliderInput("minFreq", "Minimum word frequency:", min = 1, max = 10, value = 1),
actionButton("runWordCloud", "Run Word Cloud")
),
mainPanel(
plotOutput("wordcloudPlot")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$runWordCloud, {
# Preprocess the text data
text_data <- unlist(strsplit(input$textData, ","))
text_data <- tolower(trimws(text_data))
corpus <- Corpus(VectorSource(text_data))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
freq_matrix <- as.matrix(dtm)
word_freqs <- colSums(freq_matrix)
# Filter words by minimum frequency
filtered_words <- names(word_freqs[word_freqs >= input$minFreq])
# Generate a random color palette
colors <- brewer.pal(length(filtered_words), "Set3")
# Create a word frequency data frame with random colors
word_freq_df <- data.frame(
word = filtered_words,
freq = word_freqs[filtered_words],
color = sample(colors, length(filtered_words), replace = TRUE)
)
# Generate the word cloud with colored words
wordcloud2(data = word_freq_df, color = "color")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
library(tm)
library(RColorBrewer)  # For color palettes
# Sample text data
text <- c("Data", "Science", "Machine", "R", "Python", "Data", "Machine", "Learning", "R", "Statistics", "R", "Data","R", "Visualization", "Data")
# UI
ui <- fluidPage(
titlePanel("Word Cloud Generator"),
sidebarLayout(
sidebarPanel(
textAreaInput("textData", "Enter text data (comma-separated):", value = paste(text, collapse = ", "), rows = 5),
sliderInput("minFreq", "Minimum word frequency:", min = 1, max = 10, value = 1),
actionButton("runWordCloud", "Run Word Cloud")
),
mainPanel(
plotOutput("wordcloudPlot")
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$runWordCloud, {
# Preprocess the text data
text_data <- unlist(strsplit(input$textData, ","))
text_data <- tolower(trimws(text_data))
corpus <- Corpus(VectorSource(text_data))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
freq_matrix <- as.matrix(dtm)
word_freqs <- colSums(freq_matrix)
# Filter words by minimum frequency
filtered_words <- names(word_freqs[word_freqs >= input$minFreq])
# Generate a random color palette
colors <- brewer.pal(length(filtered_words), "Set3")
# Create a word frequency data frame with random colors
word_freq_df <- data.frame(
word = filtered_words,
freq = word_freqs[filtered_words],
color = sample(colors, length(filtered_words), replace = TRUE)
)
# Generate the word cloud with colored words
wordcloud2(data = word_freq_df, color = "color")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
# Generate a random data frame for testing
set.seed(123)
num_samples <- 1000
your_data <- data.frame(shares = rpois(num_samples, lambda = 1000))
# UI
ui <- fluidPage(
theme = shinytheme("cosmo"),  # Default theme (Cosmo)
# UI elements here
tags$head(
# Link to custom CSS file
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
),
titlePanel("Article Shares Histogram"),
sidebarLayout(
sidebarPanel(
sliderInput("binwidth", "Bin Width:", min = 10, max = 200, value = 100),
selectInput("theme", "Choose a theme:",
choices = c("cosmo", "flatly", "superhero"),
selected = "cosmo")
),
mainPanel(
plotOutput("histogram")
)
)
)
# Server
server <- function(input, output) {
# Apply theme based on user selection
observe({
shinytheme(input$theme)
})
output$histogram <- renderPlot({
# Create a histogram of the 'shares' column from your data
gg <- ggplot(your_data, aes(x = shares)) +
geom_histogram(binwidth = input$binwidth, fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = "Shares", y = "Frequency") +
theme_minimal() +
ggtitle("Distribution of Article Shares") +
labs(subtitle = paste("Bin Width:", input$binwidth))
# Calculate and add mean and median annotations
mean_shares <- mean(your_data$shares)
median_shares <- median(your_data$shares)
gg <- gg +
geom_vline(xintercept = mean_shares, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_shares, y = 50, label = paste("Mean:", round(mean_shares, 2)), color = "red", size = 4) +
geom_vline(xintercept = median_shares, color = "blue", linetype = "dashed", size = 1) +
annotate("text", x = median_shares, y = 100, label = paste("Median:", round(median_shares, 2)), color = "blue", size = 4)
print(gg)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
# Generate a random data frame for testing
set.seed(123)
num_samples <- 1000
your_data <- data.frame(shares = rpois(num_samples, lambda = 1000))
# UI
ui <- fluidPage(
theme = shinytheme("cosmo"),  # Default theme (Cosmo)
# UI elements here
tags$head(
# Link to custom CSS file
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
),
titlePanel("Article Shares Histogram"),
sidebarLayout(
sidebarPanel(
sliderInput("binwidth", "Bin Width:", min = 10, max = 200, value = 100),
selectInput("theme", "Choose a theme:",
choices = c("cosmo", "flatly", "superhero"),
selected = "flatly")
),
mainPanel(
plotOutput("histogram")
)
)
)
# Server
server <- function(input, output) {
# Apply theme based on user selection
observe({
shinytheme(input$theme)
})
output$histogram <- renderPlot({
# Create a histogram of the 'shares' column from your data
gg <- ggplot(your_data, aes(x = shares)) +
geom_histogram(binwidth = input$binwidth, fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = "Shares", y = "Frequency") +
theme_minimal() +
ggtitle("Distribution of Article Shares") +
labs(subtitle = paste("Bin Width:", input$binwidth))
# Calculate and add mean and median annotations
mean_shares <- mean(your_data$shares)
median_shares <- median(your_data$shares)
gg <- gg +
geom_vline(xintercept = mean_shares, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_shares, y = 50, label = paste("Mean:", round(mean_shares, 2)), color = "red", size = 4) +
geom_vline(xintercept = median_shares, color = "blue", linetype = "dashed", size = 1) +
annotate("text", x = median_shares, y = 100, label = paste("Median:", round(median_shares, 2)), color = "blue", size = 4)
print(gg)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(shinythemes)
# Generate a random data frame for testing
set.seed(123)
num_samples <- 1000
your_data <- data.frame(shares = rpois(num_samples, lambda = 1000))
# UI
ui <- fluidPage(
titlePanel("Article Shares Histogram"),
sidebarLayout(
sidebarPanel(
sliderInput("binwidth", "Bin Width:", min = 10, max = 200, value = 100),
selectInput("theme", "Select Theme:", choices = c("cosmo", "flatly", "superhero"))
),
mainPanel(
plotOutput("histogram")
)
)
)
# Server
server <- function(input, output) {
output$histogram <- renderPlot({
# Create a histogram of the 'shares' column from your data
gg <- ggplot(your_data, aes(x = shares)) +
geom_histogram(binwidth = input$binwidth, fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = "Shares", y = "Frequency") +
ggtitle("Distribution of Article Shares") +
labs(subtitle = paste("Bin Width:", input$binwidth)) +
theme_minimal()
# Apply selected theme
if (input$theme == "cosmo") {
gg <- gg + theme_cosmo()
} else if (input$theme == "flatly") {
gg <- gg + theme_flatly()
} else if (input$theme == "superhero") {
gg <- gg + theme_superhero()
}
# Calculate and add mean and median annotations
mean_shares <- mean(your_data$shares)
median_shares <- median(your_data$shares)
gg <- gg +
geom_vline(xintercept = mean_shares, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_shares, y = 50, label = paste("Mean:", round(mean_shares, 2)), color = "red", size = 4) +
geom_vline(xintercept = median_shares, color = "blue", linetype = "dashed", size = 1) +
annotate("text", x = median_shares, y = 100, label = paste("Median:", round(median_shares, 2)), color = "blue", size = 4)
print(gg)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
# Generate a random data frame for testing
set.seed(123)
num_samples <- 1000
your_data <- data.frame(shares = rpois(num_samples, lambda = 1000))
# UI
ui <- fluidPage(
theme = shinytheme("cosmo"),  # Default theme (Cosmo)
# UI elements here
tags$head(
# Link to custom CSS file
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
),
titlePanel("Article Shares Histogram"),
sidebarLayout(
sidebarPanel(
sliderInput("binwidth", "Bin Width:", min = 10, max = 200, value = 100),
selectInput("theme", "Choose a theme:",
choices = c("cosmo", "flatly", "superhero"),
selected = "cosmo")
),
mainPanel(
plotOutput("histogram")
)
)
)
# Server
server <- function(input, output) {
# Apply theme based on user selection
observe({
shinytheme(input$theme)
})
output$histogram <- renderPlot({
# Create a histogram of the 'shares' column from your data
gg <- ggplot(your_data, aes(x = shares)) +
geom_histogram(binwidth = input$binwidth, fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = "Shares", y = "Frequency") +
theme_minimal() +
ggtitle("Distribution of Article Shares") +
labs(subtitle = paste("Bin Width:", input$binwidth))
# Calculate and add mean and median annotations
mean_shares <- mean(your_data$shares)
median_shares <- median(your_data$shares)
gg <- gg +
geom_vline(xintercept = mean_shares, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean_shares, y = 50, label = paste("Mean:", round(mean_shares, 2)), color = "red", size = 4) +
geom_vline(xintercept = median_shares, color = "blue", linetype = "dashed", size = 1) +
annotate("text", x = median_shares, y = 100, label = paste("Median:", round(median_shares, 2)), color = "blue", size = 4)
print(gg)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
